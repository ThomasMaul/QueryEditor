{
	"_method_": {
		"RunQuery": {
			"Syntax": "**RunQuery**( *queryIn* : Object )->query : Object",
			"Params": [
				[
					"queryIn",
					"Object",
					"->"
				],
				[
					"query",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		}
	},
	"cs.QueryEditor": {
		"queryLine": {
			"new()": {
				"Syntax": "**.new**( *data* : Object )",
				"Params": [
					[
						"data",
						"Object",
						"->"
					]
				],
				"Summary": ""
			}
		},
		"_Build": {
			"new()": {
				"Syntax": "**.new**()",
				"Params": [],
				"Summary": ""
			}
		},
		"queryEditor": {
			"new()": {
				"Syntax": "**.new**( *form* : Object )",
				"Params": [
					[
						"form",
						"Object",
						"->"
					]
				],
				"Summary": ""
			}
		}
	},
	"queryLine": {
		"createQueryStatement()": {
			"Syntax": "**.createQueryStatement**( *para* : Object; *clearText* : Boolean )->statement : Text",
			"Params": [
				[
					"para",
					"Object",
					"->"
				],
				[
					"clearText",
					"Boolean",
					"->"
				],
				[
					"statement",
					"Text",
					"<-"
				]
			],
			"Summary": ""
		},
		"itemlist_entrywindow()": {
			"Syntax": "**.itemlist_entrywindow**()",
			"Params": [],
			"Summary": ""
		},
		"getOperatorIndex()": {
			"Syntax": "**.getOperatorIndex**()->index : Integer",
			"Params": [
				[
					"index",
					"Integer",
					"<-"
				]
			],
			"Summary": ""
		},
		"getPlaceholder()": {
			"Syntax": "**.getPlaceholder**()->Txt_placeholder : Text",
			"Params": [
				[
					"Txt_placeholder",
					"Text",
					"<-"
				]
			],
			"Summary": ""
		},
		"getCondCombo()": {
			"Syntax": "**.getCondCombo**()->index : Integer",
			"Params": [
				[
					"index",
					"Integer",
					"<-"
				]
			],
			"Summary": ""
		},
		"getCombo2()": {
			"Syntax": "**.getCombo2**()->index : Integer",
			"Params": [
				[
					"index",
					"Integer",
					"<-"
				]
			],
			"Summary": ""
		},
		"setOperator()": {
			"Syntax": "**.setOperator**( *value* : Integer )",
			"Params": [
				[
					"value",
					"Integer",
					"->"
				]
			],
			"Summary": ""
		},
		"setPopup2()": {
			"Syntax": "**.setPopup2**( *value* : Integer )",
			"Params": [
				[
					"value",
					"Integer",
					"->"
				]
			],
			"Summary": ""
		},
		"setValue()": {
			"Syntax": "**.setValue**( *value* : Variant )",
			"Params": [
				[
					"value",
					"Variant",
					"->"
				]
			],
			"Summary": ""
		},
		"getRelationField()": {
			"Syntax": "**.getRelationField**( *base* : 4D.DataClass; *name* : Text; *commingFromTable* : Text )->field : Object",
			"Params": [
				[
					"base",
					"4D.DataClass",
					"->"
				],
				[
					"name",
					"Text",
					"->"
				],
				[
					"commingFromTable",
					"Text",
					"->"
				],
				[
					"field",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"buildConditionPopup()": {
			"Syntax": "**.buildConditionPopup**( *value* : Integer )",
			"Params": [
				[
					"value",
					"Integer",
					"->"
				]
			],
			"Summary": ""
		},
		"createSaveObject()": {
			"Syntax": "**.createSaveObject**()->object : Variant",
			"Params": [
				[
					"object",
					"Variant",
					"<-"
				]
			],
			"Summary": ""
		},
		"setCondition()": {
			"Syntax": "**.setCondition**( *value* : Integer )",
			"Params": [
				[
					"value",
					"Integer",
					"->"
				]
			],
			"Summary": ""
		},
		"findVirtualName()": {
			"Syntax": "**.findVirtualName**( *virtName* : Text )->displayName : Text",
			"Params": [
				[
					"virtName",
					"Text",
					"->"
				],
				[
					"displayName",
					"Text",
					"<-"
				]
			],
			"Summary": ""
		},
		"getTextFilter()": {
			"Syntax": "**.getTextFilter**()->Txt_filter : Text",
			"Params": [
				[
					"Txt_filter",
					"Text",
					"<-"
				]
			],
			"Summary": ""
		},
		"renderObjects()": {
			"Syntax": "**.renderObjects**( *data* : Object )->objects : Object",
			"Params": [
				[
					"data",
					"Object",
					"->"
				],
				[
					"objects",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		}
	},
	"_Build": {
		"ConvertImage()": {
			"Syntax": "**.ConvertImage**( *pathTempImg* : Text; *pathFinalImg* : Text )->error : Object",
			"Params": [
				[
					"pathTempImg",
					"Text",
					"->"
				],
				[
					"pathFinalImg",
					"Text",
					"->"
				],
				[
					"error",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"CreateImage()": {
			"Syntax": "**.CreateImage**( *pathContent* : Text; *pathImg* : Text; *name* : Text )->error : Object",
			"Params": [
				[
					"pathContent",
					"Text",
					"->"
				],
				[
					"pathImg",
					"Text",
					"->"
				],
				[
					"name",
					"Text",
					"->"
				],
				[
					"error",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"getSourcePath()": {
			"Syntax": "**.getSourcePath**()->source : Text",
			"Params": [
				[
					"source",
					"Text",
					"<-"
				]
			],
			"Summary": ""
		},
		"StapleAndZip()": {
			"Syntax": "**.StapleAndZip**()->error : Object",
			"Params": [
				[
					"error",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"Notarize()": {
			"Syntax": "**.Notarize**( *zipfilepath* : Text )->error : Object",
			"Params": [
				[
					"zipfilepath",
					"Text",
					"->"
				],
				[
					"error",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"Build()": {
			"Syntax": "**.Build**( *PathToSettings* : Text )->error : Object",
			"Params": [
				[
					"PathToSettings",
					"Text",
					"->"
				],
				[
					"error",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"Zip()": {
			"Syntax": "**.Zip**( *source* : Text; *target* : Text )->error : Object",
			"Params": [
				[
					"source",
					"Text",
					"->"
				],
				[
					"target",
					"Text",
					"->"
				],
				[
					"error",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"Staple()": {
			"Syntax": "**.Staple**( *path* : Text )->error : Object",
			"Params": [
				[
					"path",
					"Text",
					"->"
				],
				[
					"error",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"Compile()": {
			"Syntax": "**.Compile**( *options* : Object )->error : Object",
			"Params": [
				[
					"options",
					"Object",
					"->"
				],
				[
					"error",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		}
	},
	"queryEditor": {
		"useOldSaveObject()": {
			"Syntax": "**.useOldSaveObject**( *object* : Variant )",
			"Params": [
				[
					"object",
					"Variant",
					"->"
				]
			],
			"Summary": ""
		},
		"createSaveObject()": {
			"Syntax": "**.createSaveObject**()->object : Object",
			"Params": [
				[
					"object",
					"Object",
					"<-"
				]
			],
			"Summary": ""
		},
		"clearTextQueryLine()": {
			"Syntax": "**.clearTextQueryLine**()->statement : Text",
			"Params": [
				[
					"statement",
					"Text",
					"<-"
				]
			],
			"Summary": ""
		},
		"useSaveObject()": {
			"Syntax": "**.useSaveObject**( *object* : Variant )",
			"Params": [
				[
					"object",
					"Variant",
					"->"
				]
			],
			"Summary": ""
		},
		"createQueryObject()": {
			"Syntax": "**.createQueryObject**( *clearText* : Boolean )->object : Variant",
			"Params": [
				[
					"clearText",
					"Boolean",
					"->"
				],
				[
					"object",
					"Variant",
					"<-"
				]
			],
			"Summary": ""
		},
		"getQueryLine()": {
			"Syntax": "**.getQueryLine**( *pos* : Integer )->object : cs.QueryEditor.queryLine",
			"Params": [
				[
					"pos",
					"Integer",
					"->"
				],
				[
					"object",
					"cs.QueryEditor.queryLine",
					"<-"
				]
			],
			"Summary": ""
		},
		"handleFormEvent()": {
			"Syntax": "**.handleFormEvent**( *event* : Object )",
			"Params": [
				[
					"event",
					"Object",
					"->"
				]
			],
			"Summary": ""
		},
		"renderForm()": {
			"Syntax": "**.renderForm**( *subformname* : Text )",
			"Params": [
				[
					"subformname",
					"Text",
					"->"
				]
			],
			"Summary": ""
		},
		"addQueryLine()": {
			"Syntax": "**.addQueryLine**( *pos* : Integer; *lineobject* : cs.QueryEditor.queryLine )",
			"Params": [
				[
					"pos",
					"Integer",
					"->"
				],
				[
					"lineobject",
					"cs.QueryEditor.queryLine",
					"->"
				]
			],
			"Summary": ""
		},
		"reset()": {
			"Syntax": "**.reset**()",
			"Params": [],
			"Summary": ""
		},
		"findQueryLine()": {
			"Syntax": "**.findQueryLine**( *line* : Integer )->queryline : cs.QueryEditor.queryLine",
			"Params": [
				[
					"line",
					"Integer",
					"->"
				],
				[
					"queryline",
					"cs.QueryEditor.queryLine",
					"<-"
				]
			],
			"Summary": ""
		},
		"getNextCounter()": {
			"Syntax": "**.getNextCounter**()->counter : Integer",
			"Params": [
				[
					"counter",
					"Integer",
					"<-"
				]
			],
			"Summary": ""
		},
		"close()": {
			"Syntax": "**.close**()",
			"Params": [],
			"Summary": ""
		},
		"deleteQueryLine()": {
			"Syntax": "**.deleteQueryLine**( *pos* : Integer )",
			"Params": [
				[
					"pos",
					"Integer",
					"->"
				]
			],
			"Summary": ""
		}
	}
}